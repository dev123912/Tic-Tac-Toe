<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Tic Tac Toe</title>
<style>
body {
font-family: Arial, sans-serif;
display: flex;
flex-direction: column;
align-items: center;
justify-content: center;
height: 100vh;
margin: 0;
background-color: #f5f5f5;
}

h1 {
color: #333;
margin-bottom: 10px;
}

.scoreboard {
display: flex;
justify-content: space-around;
width: 300px;
margin-bottom: 20px;
}

.player-score {
text-align: center;
padding: 10px 20px;
border-radius: 5px;
font-weight: bold;
}

.player-x {
background-color: #ffebee;
color: #ff4757;
}

.player-o {
background-color: #e8f5e9;
color: #2ed573;
}

.status {
margin: 10px 0;
font-size: 24px;
font-weight: bold;
color: #444;
}

.board {
display: grid;
grid-template-columns: repeat(3, 100px);
grid-template-rows: repeat(3, 100px);
gap: 5px;
background-color: #333;
}

.cell {
width: 100px;
height: 100px;
background-color: #fff;
display: flex;
align-items: center;
justify-content: center;
font-size: 48px;
font-weight: bold;
cursor: pointer;
transition: background-color 0.3s;
}

.cell:hover {
background-color: #eee;
}

.cell.x {
color: #ff4757;
}

.cell.o {
color: #2ed573;
}

.cell.winner {
background-color: #ffeaa7;
}

button {
margin-top: 20px;
padding: 10px 20px;
font-size: 16px;
background-color: #3498db;
color: white;
border: none;
border-radius: 5px;
cursor: pointer;
transition: background-color 0.3s;
}

button:hover {
background-color: #2980b9;
}

.celebration {
position: fixed;
top: 0;
left: 0;
width: 100%;
height: 100%;
background-color: rgba(0,0,0,0.7);
display: none;
flex-direction: column;
align-items: center;
justify-content: center;
z-index: 100;
color: white;
font-size: 36px;
text-align: center;
}

.stars {
font-size: 100px;
margin: 20px;
animation: spin 1s linear infinite;
}

@keyframes spin {
0% { transform: rotate(0deg) scale(1); }
50% { transform: rotate(180deg) scale(1.5); }
100% { transform: rotate(360deg) scale(1); }
}
</style>
</head>
<body>
<h1>Tic Tac Toe</h1>
<div class="scoreboard">
<div class="player-score player-x">
<div>Player X</div>
<div id="score-x">0</div>
</div>
<div class="player-score player-o">
<div>Player O</div>
<div id="score-o">0</div>
</div>
</div>
<div class="status">Player X's turn</div>
<div class="board" id="board">
<div class="cell" data-index="0"></div>
<div class="cell" data-index="1"></div>
<div class="cell" data-index="2"></div>
<div class="cell" data-index="3"></div>
<div class="cell" data-index="4"></div>
<div class="cell" data-index="5"></div>
<div class="cell" data-index="6"></div>
<div class="cell" data-index="7"></div>
<div class="cell" data-index="8"></div>
</div>
<button id="reset">Reset Game</button>

<div class="celebration" id="celebration">
<div class="stars">★ ★ ★</div>
<div id="winner-message">Player X wins the match!</div>
<div>Starting new match...</div>
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
const board = document.getElementById('board');
const cells = document.querySelectorAll('.cell');
const status = document.querySelector('.status');
const resetButton = document.getElementById('reset');
const scoreX = document.getElementById('score-x');
const scoreO = document.getElementById('score-o');
const celebration = document.getElementById('celebration');
const winnerMessage = document.getElementById('winner-message');

let currentPlayer = 'X';
let gameState = ['', '', '', '', '', '', '', '', ''];
let gameActive = true;
let scores = { X: 0, O: 0 };

const winningConditions = [
[0, 1, 2], // top row
[3, 4, 5], // middle row
[6, 7, 8], // bottom row
[0, 3, 6], // left column
[1, 4, 7], // middle column
[2, 5, 8], // right column
[0, 4, 8], // diagonal top-left to bottom-right
[2, 4, 6] // diagonal top-right to bottom-left
];

// Handle cell click
function handleCellClick(e) {
const clickedCell = e.target;
const clickedCellIndex = parseInt(clickedCell.getAttribute('data-index'));

// If cell is already filled or game is not active, ignore the click
if (gameState[clickedCellIndex] !== '' || !gameActive) {
return;
}

// Update game state and UI
gameState[clickedCellIndex] = currentPlayer;
clickedCell.textContent = currentPlayer;
clickedCell.classList.add(currentPlayer.toLowerCase());

// Check for win or draw
checkResult();
}

// Check if the current player has won or if it's a draw
function checkResult() {
let roundWon = false;

for (let i = 0; i < winningConditions.length; i++) {
const [a, b, c] = winningConditions[i];

if (gameState[a] === '' || gameState[b] === '' || gameState[c] === '') {
continue;
}

if (gameState[a] === gameState[b] && gameState[b] === gameState[c]) {
roundWon = true;

// Highlight winning cells
cells[a].classList.add('winner');
cells[b].classList.add('winner');
cells[c].classList.add('winner');
break;
}
}

if (roundWon) {
status.textContent = `Player ${currentPlayer} wins!`;
updateScore(currentPlayer);
gameActive = false;
return;
}

// Check for draw
if (!gameState.includes('')) {
status.textContent = "Game ended in a draw!";
gameActive = false;
return;
}

// Switch player
currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
status.textContent = `Player ${currentPlayer}'s turn`;
}

// Update player score and check for match win
function updateScore(winner) {
scores[winner]++;

if (winner === 'X') {
scoreX.textContent = scores.X;
} else {
scoreO.textContent = scores.O;
}

// Check if any player reached 10 points
if (scores.X === 10 || scores.O === 10) {
celebrateWinner(winner);
}
}

// Show celebration and reset scores
function celebrateWinner(winner) {
winnerMessage.textContent = `Player ${winner} wins the match!`;
celebration.style.display = 'flex';

setTimeout(() => {
celebration.style.display = 'none';
scores = { X: 0, O: 0 };
scoreX.textContent = '0';
scoreO.textContent = '0';
resetGame();
}, 3000);
}

// Reset the game
function resetGame() {
currentPlayer = 'X';
gameState = ['', '', '', '', '', '', '', '', ''];
gameActive = true;
status.textContent = `Player ${currentPlayer}'s turn`;

cells.forEach(cell => {
cell.textContent = '';
cell.classList.remove('x', 'o', 'winner');
});
}

// Event listeners
cells.forEach(cell => cell.addEventListener('click', handleCellClick));
resetButton.addEventListener('click', resetGame);
});
</script>
</body>
</html>